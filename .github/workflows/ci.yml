name: Continuous Integration

on:
  push:
    branches:
    - master
    - develop

    paths:
    - cmake-init/**
    - .github/workflows/*

  pull_request:
    branches:
    - develop

    paths:
    - cmake-init/**
    - .github/workflows/*

jobs:
  test:
    strategy:
      fail-fast: false

      matrix:
        job: [1, 2, 3, 4]

        os: [macos, ubuntu, windows]

        include:
        - { job: 1, type: "-s --examples", name: "Library: shared", flag: "-D BUILD_SHARED_LIBS=YES" }
        - { job: 2, type: "-s --examples", name: "Library: static", flag: "" }
        - { job: 3, type: "-h --examples", name: "Library: header-only", flag: "" }
        - { job: 4, type: -e, name: Executable, flag: "" }

    name: ${{ matrix.name }} (${{ matrix.os }})

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1

    - name: Install static analyzers
      if: matrix.os == 'ubuntu'
      run: sudo apt-get install clang-tidy cppcheck -y -q

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Create project
      run: |
        python -m zipapp cmake-init -p "/usr/bin/env python3"
        python cmake-init.pyz ${{ matrix.type }} proj

    - name: Test --vcpkg mode
      working-directory: proj
      run: |
        python ../cmake-init.pyz --vcpkg shared -s
        python ../cmake-init.pyz --vcpkg headeronly -h

    - name: Lint generated project
      if: matrix.os == 'ubuntu'
      working-directory: proj
      run: cmake -D FORMAT_COMMAND=clang-format-11 -P cmake/lint.cmake

    - name: Configure
      run: cmake -S proj --preset=ci-${{ matrix.os }} ${{ matrix.flag }}

    - name: Build
      run: cmake --build proj/build --config Release

    - name: Install
      run: cmake --install proj/build --config Release --prefix proj/prefix

    - name: Test
      run: ctest --test-dir proj/build -C Release

  release:
    name: Package a release

    if: github.ref == 'refs/heads/master'
      && github.repository_owner == 'friendlyanon'

    needs: test

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Package
      run: python -m zipapp cmake-init -p "/usr/bin/env python3"

    - name: Get version
      id: version
      run: echo "::set-output name=version::$(python cmake-init.pyz --version)"

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: cmake-init.pyz
        prerelease: true
        tag_name: v${{ steps.version.outputs.version }}
        body: Release of version ${{ steps.version.outputs.version }}
        name: v${{ steps.version.outputs.version }}
