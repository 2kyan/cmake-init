name: Continuous Integration

on:
  push:
    branches:
    - develop
    - feature/*

    paths:
    - "!cmake-init/templates/common/.github/**"
    - "!cmake-init/templates/common/docs/**"
    - "!cmake-init/templates/common/*.md"
    - "!cmake-init/templates/common/.gitignore"
    - "!cmake-init/templates/common/CMakeUserPresets.json"
    - .github/workflows/*
    - cmake-init/**

  pull_request:
    branches:
    - develop

    paths:
    - "!cmake-init/templates/common/.github/**"
    - "!cmake-init/templates/common/docs/**"
    - "!cmake-init/templates/common/*.md"
    - "!cmake-init/templates/common/.gitignore"
    - "!cmake-init/templates/common/CMakeUserPresets.json"
    - .github/workflows/*
    - cmake-init/**

jobs:
  test:
    if: github.event.commits[0].message != 'Bump version'

    strategy:
      fail-fast: false

      matrix:
        job: [1, 2, 3, 4, 5, 6, 7, 8]

        pm: [none, conan, vcpkg]

        os: [macos-latest, ubuntu-latest, windows-2022]

        include:
        - { job: 1, type: "-s --examples", name: "Library (C++): shared", flag: "-D BUILD_SHARED_LIBS=YES" }
        - { job: 2, type: "-s --examples", name: "Library (C++): static", flag: "" }
        - { job: 3, type: "-h --examples", name: "Library (C++): header-only", flag: "" }
        - { job: 4, type: -e, name: "Executable (C++)", flag: "" }
        - { job: 5, type: "--c -s --examples", name: "Library (C): shared", flag: "-D BUILD_SHARED_LIBS=YES" }
        - { job: 6, type: "--c -s --examples", name: "Library (C): static", flag: "" }
        - { job: 7, type: "--c -h --examples", name: "Library (C): header-only", flag: "" }
        - { job: 8, type: "--c -e", name: "Executable (C)", flag: "" }

    name: "${{ matrix.name }} (${{ matrix.os }}) (PM: ${{ matrix.pm }})"

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install clang-tidy cppcheck -y -q

    - uses: actions/setup-python@v2
      with: { python-version: "3.8" }

    - name: Create project
      run: |
        python -m zipapp cmake-init -p "/usr/bin/env python3"
        python cmake-init.pyz ${{ matrix.type }} -p ${{ matrix.pm }} proj

    - name: Test --vcpkg mode
      working-directory: proj
      run: |
        python ../cmake-init.pyz --vcpkg shared -s
        python ../cmake-init.pyz --vcpkg headeronly -h

    - name: Lint generated project
      if: matrix.os == 'ubuntu-latest'
      working-directory: proj
      run: cmake -D FORMAT_COMMAND=clang-format-12 -P cmake/lint.cmake

    - name: Install Conan
      if: matrix.pm == 'conan'
      working-directory: proj
      shell: bash
      run: |
        pip3 install "conan<2,!=1.49.0"
        conan profile new default --detect
        if [ ${{ matrix.os }} = ubuntu-latest ]; then
          conan profile update settings.compiler.libcxx=libstdc++11 default
        fi
        conan install . -b missing

    - name: Install vcpkg
      if: matrix.pm == 'vcpkg'
      uses: friendlyanon/setup-vcpkg@v1
      with:
        committish: "b49b2bdf22559c89eddbf29a29621a1dc6929320"
        cache-version: "1"
        ignore-reserve-cache-error: true

    - name: Configure
      shell: pwsh
      run: cmake -S proj "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        ${{ matrix.flag }}

    - name: Build
      run: cmake --build proj/build --config Release

    - name: Install
      run: cmake --install proj/build --config Release --prefix proj/prefix

    - name: Setup PATH
      if: matrix.os == 'windows-2022' && matrix.pm != 'none'
      run: Add-Content "$env:GITHUB_PATH" "$(Get-Location)\proj\build\Release"

    - name: Test
      run: ctest --test-dir proj/build -C Release
